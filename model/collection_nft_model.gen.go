// Code generated by sqlgen. DO NOT EDIT!

package model

import (
	"context"
	"fmt"
	"time"

	"gorm.io/gorm"
)

// CollectionNftModel represents a collection_nft model.
type CollectionNftModel struct {
	db *gorm.DB
}

// CollectionNft represents a collection_nft struct data.
type CollectionNft struct {
	Id                  int32     `gorm:"column:id;primaryKey;autoIncrement" json:"id"`
	MintAmount          int32     `gorm:"column:mint_amount" json:"mintAmount"`                    // nft铸造总量
	LikeCount           int32     `gorm:"column:like_count" json:"likeCount"`                      // 点赞数
	CollectionCount     int32     `gorm:"column:collection_count" json:"collectionCount"`          // 收藏数
	IssueDate           time.Time `gorm:"column:issue_date" json:"issueDate"`                      // 发行日期
	CreateTime          int32     `gorm:"column:create_time" json:"createTime"`                    // 创建时间
	UpdateTime          int32     `gorm:"column:update_time" json:"updateTime"`                    // 更新时间
	TopicNumber         string    `gorm:"column:topic_number" json:"topicNumber"`                  // 主题编号
	Cover               string    `gorm:"column:cover" json:"cover"`                               // 封面
	CoverMobile         string    `gorm:"column:cover_mobile" json:"coverMobile"`                  // NFT封面-移动端
	StartingTokenId     int32     `gorm:"column:starting_token_id" json:"startingTokenId"`         // NFT铸造TokenId起始值
	Type                int8      `gorm:"column:type" json:"type"`                                 // 类型 0-普通藏品 1-版权收益藏品
	Desc                string    `gorm:"column:desc" json:"desc"`                                 // NFT系列简介
	Name                string    `gorm:"column:name" json:"name"`                                 // 系列名称
	IssueUserId         int64     `gorm:"column:issue_user_id" json:"issueUserId"`                 // 发行方用户 ID
	IsBlindBox          int8      `gorm:"column:is_blind_box" json:"isBlindBox"`                   // 是否是盲盒 0-否 1-是
	DetailDrawing       string    `gorm:"column:detail_drawing" json:"detailDrawing"`              // 详情图
	DetailDrawingMobile string    `gorm:"column:detail_drawing_mobile" json:"detailDrawingMobile"` // 详情图-移动端
	Video               string    `gorm:"column:video" json:"video"`                               // 详情页-视频
	NftBasicId          int64     `gorm:"column:nft_basic_id" json:"nftBasicId"`                   // 收藏品NFT基础信息ID
	IsRation            int8      `gorm:"column:is_ration" json:"isRation"`                        // 是否定量 0-不确定数量 1-确定数量 (盲盒下有效，如果定量则该NFT下每个类型最终数量只有一个；如果不定量则根据概率决定每个类型的最终数量)
	SpecialCover        string    `gorm:"column:special_cover" json:"specialCover"`                // 系列专题封面
	SpecialCoverMobile  string    `gorm:"column:special_cover_mobile" json:"specialCoverMobile"`   // 系列专题封面-移动端
	MusicId             int64     `gorm:"column:music_id" json:"musicId"`                          // 版权收益音乐ID（音频类NFT可绑）
	GenerateType        int8      `gorm:"column:generate_type" json:"generateType"`                // tokenId生成规则（1-递增，2-随机）
	UserId              int64     `gorm:"column:user_id" json:"userId"`                            // 用户uid,不为空则为用户创建
}

// TableName returns the table name. it implemented by gorm.Tabler.
func (CollectionNft) TableName() string {
	return "collection_nft"
}

// NewCollectionNftModel returns a new collection_nft model.
func NewCollectionNftModel(db *gorm.DB) *CollectionNftModel {
	return &CollectionNftModel{db: db}
}

// Create creates  collection_nft data.
func (m *CollectionNftModel) Create(ctx context.Context, data ...*CollectionNft) error {
	if len(data) == 0 {
		return fmt.Errorf("data is empty")
	}

	db := m.db.WithContext(ctx)
	list := data[:]
	return db.Create(&list).Error
}
