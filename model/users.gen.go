// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"myproj/model"
)

func newUser(db *gorm.DB, opts ...gen.DOOption) user {
	_user := user{}

	_user.userDo.UseDB(db, opts...)
	_user.userDo.UseModel(&model.User{})

	tableName := _user.userDo.TableName()
	_user.ALL = field.NewAsterisk(tableName)
	_user.ID = field.NewInt64(tableName, "id")
	_user.WxOpenid = field.NewString(tableName, "wx_openid")
	_user.Phone = field.NewString(tableName, "phone")
	_user.UserPassword = field.NewString(tableName, "user_password")
	_user.Nickname = field.NewString(tableName, "nickname")
	_user.Sex = field.NewInt32(tableName, "sex")
	_user.Avatar = field.NewString(tableName, "avatar")
	_user.Introduction = field.NewString(tableName, "introduction")
	_user.DouyinURL = field.NewString(tableName, "douyin_url")
	_user.KugouURL = field.NewString(tableName, "kugou_url")
	_user.QqyinyueURL = field.NewString(tableName, "qqyinyue_url")
	_user.WangyiyunURL = field.NewString(tableName, "wangyiyun_url")
	_user.WeiboURL = field.NewString(tableName, "weibo_url")
	_user.KuaishouURL = field.NewString(tableName, "kuaishou_url")
	_user.AttentionCount = field.NewInt32(tableName, "attention_count")
	_user.FansCount = field.NewInt32(tableName, "fans_count")
	_user.LikesCount = field.NewInt32(tableName, "likes_count")
	_user.IsDisable = field.NewInt32(tableName, "is_disable")
	_user.IsDeleted = field.NewInt32(tableName, "is_deleted")
	_user.CreateTime = field.NewInt64(tableName, "create_time")
	_user.UpdateTime = field.NewInt64(tableName, "update_time")
	_user.Birthday = field.NewTime(tableName, "birthday")
	_user.Province = field.NewString(tableName, "province")
	_user.Salt = field.NewString(tableName, "salt")
	_user.InviteCode = field.NewString(tableName, "invite_code")
	_user.FromChannel = field.NewString(tableName, "from_channel")
	_user.SetupPassword = field.NewBool(tableName, "setup_password")
	_user.Type = field.NewBool(tableName, "type")
	_user.RiskScore = field.NewInt32(tableName, "risk_score")
	_user.RiskTags = field.NewString(tableName, "risk_tags")
	_user.ClientIP = field.NewString(tableName, "client_ip")
	_user.UaToken = field.NewString(tableName, "ua_token")
	_user.WebUmidToken = field.NewString(tableName, "web_umid_token")
	_user.ActStatus = field.NewInt32(tableName, "act_status")
	_user.HasNftTransfer = field.NewInt32(tableName, "has_nft_transfer")
	_user.IsVipSign = field.NewBool(tableName, "is_vip_sign")
	_user.HasMusicPublish = field.NewBool(tableName, "has_music_publish")
	_user.HasMusicCasting = field.NewBool(tableName, "has_music_casting")
	_user.DeleteTime = field.NewInt32(tableName, "delete_time")
	_user.WxAccount = field.NewString(tableName, "wx_account")
	_user.DeviceToken = field.NewString(tableName, "device_token")
	_user.Platform = field.NewString(tableName, "platform")
	_user.PrivacySwitch = field.NewInt32(tableName, "privacy_switch")
	_user.DiscuzUID = field.NewInt32(tableName, "discuz_uid")

	_user.fillFieldMap()

	return _user
}

type user struct {
	userDo userDo

	ALL             field.Asterisk
	ID              field.Int64
	WxOpenid        field.String // 微信openid
	Phone           field.String // 用户手机号
	UserPassword    field.String // 用户密码
	Nickname        field.String // 昵称
	Sex             field.Int32  // 性别0女，1男，-1为未设置
	Avatar          field.String // 头像路径
	Introduction    field.String // 个人介绍
	DouyinURL       field.String
	KugouURL        field.String
	QqyinyueURL     field.String
	WangyiyunURL    field.String
	WeiboURL        field.String
	KuaishouURL     field.String
	AttentionCount  field.Int32  // 关注数
	FansCount       field.Int32  // 粉丝数
	LikesCount      field.Int32  // 获赞数
	IsDisable       field.Int32  // 是否禁用1已禁用0未禁用，默认值为0
	IsDeleted       field.Int32  // 是否删除1已删除0未删除，默认值为0
	CreateTime      field.Int64  // 创建时间，默认值为当前时间
	UpdateTime      field.Int64  // 修改时间
	Birthday        field.Time   // 生日
	Province        field.String // 省份
	Salt            field.String // password + salt
	InviteCode      field.String // 邀请码
	FromChannel     field.String // 来源渠道
	SetupPassword   field.Bool   // 是否设置密码
	Type            field.Bool   // 用户类型 1-常规用户(可发行版权收益NFT) 2-版权方用户(可发行版权收益NFT及收藏品NFT)
	RiskScore       field.Int32  // 阿里注册风险分析分数
	RiskTags        field.String // 阿里注册风险分析tags
	ClientIP        field.String // 用户id
	UaToken         field.String // js 获取的设备token
	WebUmidToken    field.String // js 获取的设备相关token
	ActStatus       field.Int32  // H5拉新活动用户清洗状态（0-未清洗，1-已清洗）
	HasNftTransfer  field.Int32  // 是否可以转赠 1=可以 0=不可以
	IsVipSign       field.Bool   // 是否加v 0=否 1=是
	HasMusicPublish field.Bool   // 是否有音乐发布权限 0=否 1=有
	HasMusicCasting field.Bool   // 是否有铸造权限功能 0=否 1=有
	DeleteTime      field.Int32  // 删除时间 即注销时间
	WxAccount       field.String // 微信账号
	DeviceToken     field.String // 推送设备号
	Platform        field.String //  平台（android，ios）
	PrivacySwitch   field.Int32  // 隐私开关（0-关 1-开）
	DiscuzUID       field.Int32  // discuz_uid

	fieldMap map[string]field.Expr
}

func (u user) Table(newTableName string) *user {
	u.userDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u user) As(alias string) *user {
	u.userDo.DO = *(u.userDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *user) updateTableName(table string) *user {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.WxOpenid = field.NewString(table, "wx_openid")
	u.Phone = field.NewString(table, "phone")
	u.UserPassword = field.NewString(table, "user_password")
	u.Nickname = field.NewString(table, "nickname")
	u.Sex = field.NewInt32(table, "sex")
	u.Avatar = field.NewString(table, "avatar")
	u.Introduction = field.NewString(table, "introduction")
	u.DouyinURL = field.NewString(table, "douyin_url")
	u.KugouURL = field.NewString(table, "kugou_url")
	u.QqyinyueURL = field.NewString(table, "qqyinyue_url")
	u.WangyiyunURL = field.NewString(table, "wangyiyun_url")
	u.WeiboURL = field.NewString(table, "weibo_url")
	u.KuaishouURL = field.NewString(table, "kuaishou_url")
	u.AttentionCount = field.NewInt32(table, "attention_count")
	u.FansCount = field.NewInt32(table, "fans_count")
	u.LikesCount = field.NewInt32(table, "likes_count")
	u.IsDisable = field.NewInt32(table, "is_disable")
	u.IsDeleted = field.NewInt32(table, "is_deleted")
	u.CreateTime = field.NewInt64(table, "create_time")
	u.UpdateTime = field.NewInt64(table, "update_time")
	u.Birthday = field.NewTime(table, "birthday")
	u.Province = field.NewString(table, "province")
	u.Salt = field.NewString(table, "salt")
	u.InviteCode = field.NewString(table, "invite_code")
	u.FromChannel = field.NewString(table, "from_channel")
	u.SetupPassword = field.NewBool(table, "setup_password")
	u.Type = field.NewBool(table, "type")
	u.RiskScore = field.NewInt32(table, "risk_score")
	u.RiskTags = field.NewString(table, "risk_tags")
	u.ClientIP = field.NewString(table, "client_ip")
	u.UaToken = field.NewString(table, "ua_token")
	u.WebUmidToken = field.NewString(table, "web_umid_token")
	u.ActStatus = field.NewInt32(table, "act_status")
	u.HasNftTransfer = field.NewInt32(table, "has_nft_transfer")
	u.IsVipSign = field.NewBool(table, "is_vip_sign")
	u.HasMusicPublish = field.NewBool(table, "has_music_publish")
	u.HasMusicCasting = field.NewBool(table, "has_music_casting")
	u.DeleteTime = field.NewInt32(table, "delete_time")
	u.WxAccount = field.NewString(table, "wx_account")
	u.DeviceToken = field.NewString(table, "device_token")
	u.Platform = field.NewString(table, "platform")
	u.PrivacySwitch = field.NewInt32(table, "privacy_switch")
	u.DiscuzUID = field.NewInt32(table, "discuz_uid")

	u.fillFieldMap()

	return u
}

func (u *user) WithContext(ctx context.Context) IUserDo { return u.userDo.WithContext(ctx) }

func (u user) TableName() string { return u.userDo.TableName() }

func (u user) Alias() string { return u.userDo.Alias() }

func (u *user) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *user) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 44)
	u.fieldMap["id"] = u.ID
	u.fieldMap["wx_openid"] = u.WxOpenid
	u.fieldMap["phone"] = u.Phone
	u.fieldMap["user_password"] = u.UserPassword
	u.fieldMap["nickname"] = u.Nickname
	u.fieldMap["sex"] = u.Sex
	u.fieldMap["avatar"] = u.Avatar
	u.fieldMap["introduction"] = u.Introduction
	u.fieldMap["douyin_url"] = u.DouyinURL
	u.fieldMap["kugou_url"] = u.KugouURL
	u.fieldMap["qqyinyue_url"] = u.QqyinyueURL
	u.fieldMap["wangyiyun_url"] = u.WangyiyunURL
	u.fieldMap["weibo_url"] = u.WeiboURL
	u.fieldMap["kuaishou_url"] = u.KuaishouURL
	u.fieldMap["attention_count"] = u.AttentionCount
	u.fieldMap["fans_count"] = u.FansCount
	u.fieldMap["likes_count"] = u.LikesCount
	u.fieldMap["is_disable"] = u.IsDisable
	u.fieldMap["is_deleted"] = u.IsDeleted
	u.fieldMap["create_time"] = u.CreateTime
	u.fieldMap["update_time"] = u.UpdateTime
	u.fieldMap["birthday"] = u.Birthday
	u.fieldMap["province"] = u.Province
	u.fieldMap["salt"] = u.Salt
	u.fieldMap["invite_code"] = u.InviteCode
	u.fieldMap["from_channel"] = u.FromChannel
	u.fieldMap["setup_password"] = u.SetupPassword
	u.fieldMap["type"] = u.Type
	u.fieldMap["risk_score"] = u.RiskScore
	u.fieldMap["risk_tags"] = u.RiskTags
	u.fieldMap["client_ip"] = u.ClientIP
	u.fieldMap["ua_token"] = u.UaToken
	u.fieldMap["web_umid_token"] = u.WebUmidToken
	u.fieldMap["act_status"] = u.ActStatus
	u.fieldMap["has_nft_transfer"] = u.HasNftTransfer
	u.fieldMap["is_vip_sign"] = u.IsVipSign
	u.fieldMap["has_music_publish"] = u.HasMusicPublish
	u.fieldMap["has_music_casting"] = u.HasMusicCasting
	u.fieldMap["delete_time"] = u.DeleteTime
	u.fieldMap["wx_account"] = u.WxAccount
	u.fieldMap["device_token"] = u.DeviceToken
	u.fieldMap["platform"] = u.Platform
	u.fieldMap["privacy_switch"] = u.PrivacySwitch
	u.fieldMap["discuz_uid"] = u.DiscuzUID
}

func (u user) clone(db *gorm.DB) user {
	u.userDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u user) replaceDB(db *gorm.DB) user {
	u.userDo.ReplaceDB(db)
	return u
}

type userDo struct{ gen.DO }

type IUserDo interface {
	gen.SubQuery
	Debug() IUserDo
	WithContext(ctx context.Context) IUserDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserDo
	WriteDB() IUserDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserDo
	Not(conds ...gen.Condition) IUserDo
	Or(conds ...gen.Condition) IUserDo
	Select(conds ...field.Expr) IUserDo
	Where(conds ...gen.Condition) IUserDo
	Order(conds ...field.Expr) IUserDo
	Distinct(cols ...field.Expr) IUserDo
	Omit(cols ...field.Expr) IUserDo
	Join(table schema.Tabler, on ...field.Expr) IUserDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserDo
	Group(cols ...field.Expr) IUserDo
	Having(conds ...gen.Condition) IUserDo
	Limit(limit int) IUserDo
	Offset(offset int) IUserDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserDo
	Unscoped() IUserDo
	Create(values ...*model.User) error
	CreateInBatches(values []*model.User, batchSize int) error
	Save(values ...*model.User) error
	First() (*model.User, error)
	Take() (*model.User, error)
	Last() (*model.User, error)
	Find() ([]*model.User, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.User, err error)
	FindInBatches(result *[]*model.User, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.User) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserDo
	Assign(attrs ...field.AssignExpr) IUserDo
	Joins(fields ...field.RelationField) IUserDo
	Preload(fields ...field.RelationField) IUserDo
	FirstOrInit() (*model.User, error)
	FirstOrCreate() (*model.User, error)
	FindByPage(offset int, limit int) (result []*model.User, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userDo) Debug() IUserDo {
	return u.withDO(u.DO.Debug())
}

func (u userDo) WithContext(ctx context.Context) IUserDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userDo) ReadDB() IUserDo {
	return u.Clauses(dbresolver.Read)
}

func (u userDo) WriteDB() IUserDo {
	return u.Clauses(dbresolver.Write)
}

func (u userDo) Session(config *gorm.Session) IUserDo {
	return u.withDO(u.DO.Session(config))
}

func (u userDo) Clauses(conds ...clause.Expression) IUserDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userDo) Returning(value interface{}, columns ...string) IUserDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userDo) Not(conds ...gen.Condition) IUserDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userDo) Or(conds ...gen.Condition) IUserDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userDo) Select(conds ...field.Expr) IUserDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userDo) Where(conds ...gen.Condition) IUserDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IUserDo {
	return u.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (u userDo) Order(conds ...field.Expr) IUserDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userDo) Distinct(cols ...field.Expr) IUserDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userDo) Omit(cols ...field.Expr) IUserDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userDo) Join(table schema.Tabler, on ...field.Expr) IUserDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userDo) Group(cols ...field.Expr) IUserDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userDo) Having(conds ...gen.Condition) IUserDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userDo) Limit(limit int) IUserDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userDo) Offset(offset int) IUserDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userDo) Unscoped() IUserDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userDo) Create(values ...*model.User) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userDo) CreateInBatches(values []*model.User, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userDo) Save(values ...*model.User) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userDo) First() (*model.User, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.User), nil
	}
}

func (u userDo) Take() (*model.User, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.User), nil
	}
}

func (u userDo) Last() (*model.User, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.User), nil
	}
}

func (u userDo) Find() ([]*model.User, error) {
	result, err := u.DO.Find()
	return result.([]*model.User), err
}

func (u userDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.User, err error) {
	buf := make([]*model.User, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userDo) FindInBatches(result *[]*model.User, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userDo) Attrs(attrs ...field.AssignExpr) IUserDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userDo) Assign(attrs ...field.AssignExpr) IUserDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userDo) Joins(fields ...field.RelationField) IUserDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userDo) Preload(fields ...field.RelationField) IUserDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userDo) FirstOrInit() (*model.User, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.User), nil
	}
}

func (u userDo) FirstOrCreate() (*model.User, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.User), nil
	}
}

func (u userDo) FindByPage(offset int, limit int) (result []*model.User, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userDo) Delete(models ...*model.User) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userDo) withDO(do gen.Dao) *userDo {
	u.DO = *do.(*gen.DO)
	return u
}
